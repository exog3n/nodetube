# Use Ubuntu as the base image
FROM ubuntu:22.04 as base

# Install dependencies
RUN apt-get update && apt-get install -y \
    git \
    tar \
    python3 \
    python3-pip \
    nodejs \
    npm \
    build-essential \
    && rm -rf /var/lib/apt/lists/*

# Copy application files
COPY app* package* .env.settings.sample .env.private.sample copySettingsAndPrivateFiles.js Procfile routes.js /app/
COPY bin /app/bin/
COPY caching /app/caching/
COPY config /app/config/
COPY controllers /app/controllers/
COPY keys /app/keys/
COPY lib /app/lib/
COPY media /app/media/
COPY middlewares /app/middlewares/
COPY models /app/models/
COPY public /app/public/
COPY scripts /app/scripts/
COPY views /app/views/

# Build stage
FROM base as builder
WORKDIR /app/

# Install production dependencies and clean up unnecessary files
RUN npm install --production && \
    node ./copySettingsAndPrivateFiles.js && \
    rm -rf /app/node_modules/ffprobe-static/bin/darwin && \
    rm -rf /app/node_modules/ffprobe-static/bin/win32 && \
    rm -rf /app/node_modules/ffprobe-static/bin/linux/ia32 && \
    rm -rf /app/node_modules/webp-converter/bin/libwebp_win64 && \
    rm -rf /app/node_modules/webp-converter/bin/libwebp_osx && \
    strip /app/node_modules/ngrok/bin/ngrok

# Final stage to run the application
FROM ubuntu:22.04
WORKDIR /app/

# Install runtime dependencies (only the essentials)
RUN apt-get update && apt-get install -y \
    tar \
    python3 \
    nodejs \
    npm \
    && rm -rf /var/lib/apt/lists/*

# Copy built application from the builder stage
COPY --from=builder /app/ /app/

# Create symbolic links for ffprobe and ffmpeg
RUN ln -s /app/node_modules/ffprobe-static/bin/linux/x64/ffprobe /app/node_modules/@ffmpeg-installer/linux-x64/ffmpeg /usr/local/bin/

# Expose the necessary port
EXPOSE 8080

# Set the default command to run the application
CMD ["npm", "start"]
